#!/usr/bin/env node

const http = require("http");
require("dotenv").config();

const app = require("../src/main");

const db = require("../src/configs/db.config");
const config = require("../src/configs/env.config/app.env");

const { app_port } = config;

const port = normalizePort(app_port || "8000");

let server;

async function runStart() {
  console.info("--".repeat(22));
  console.time("⏳ Server started in");
  console.info("🚀 Starting server...");

  await connectDatabase();
  await initServer();
  console.timeEnd("⏳ Server started in");
  console.info("🕒 Initiated at", new Date().toLocaleString());
}

async function connectDatabase() {
  try {
    await db.establishConnection();
    console.info("✅ Database connected successfully\n");
  } catch (error) {
    console.error("❌ Failed to connect to the database:", error);
    process.exit(1);
  }
}

async function initServer() {
  server = http.createServer(app);
  server.listen(port, () => {
    console.info(`🌐 Listening on: http://localhost:${port}/api`);
    console.info("--".repeat(22), "\n");
  });
  server.on("error", onError);
}

runStart().catch((e) => shutdown(e));

process.on("SIGTERM", shutdown);
process.on("SIGINT", shutdown);

// Handle unhandled promise rejections
process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  shutdown({ reason, promise });
});

function normalizePort(val) {
  const parsedPort = parseInt(val, 10);
  return isNaN(parsedPort) ? val : parsedPort;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = `Port ${port}`;
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

async function shutdown(info) {
  console.info(info);
  console.info("🛑 Gracefully shutting down...\n");
  if (server) await server.close();
  process.exit(0); // Clean exit.
}
